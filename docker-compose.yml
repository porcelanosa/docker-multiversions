services:
  # PHP 7.4
  webapp-7-4:
    # Если нет секции build, то система будет искать образ в репозиториях
    build:
      args:
        uname: ${PHP_UNAME}
        uid: ${PHP_UID}
        gid: ${PHP_GID}
      context: ./fpm/fpm-7.4
      dockerfile: Dockerfile
    image: webapp/php7.4 # имя будущего образа
    container_name: webapp74_wsl # имя контейнера после запуска
    #    ports:
    #      - "9003:9003"
    volumes:
      - ./code:${SITE_PATH}
      - ./.env:${SITE_PATH}/.env
      - ./fpm/fpm-7.4/custom_php.ini:/usr/local/etc/php/conf.d/custom_php.ini
      # - ./fpm/fpm-7.4/php.ini:/usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini
    environment:
      COMPOSER_MEMORY_LIMIT: 2G
      # XDEBUG_CONFIG: client_host=${XDEBUG_REMOTE_HOST} client_port=${XDEBUG_STORM_PORT} remote_enable=1
      # PHP_IDE_CONFIG: serverName=${XDEBUG_STORM_SERVER_NAME}
    expose:
      - 9000
      - 9003
    # мы можем создать для контейнеров внутреннюю сеть
    networks:
      - app-net
    depends_on:
      - db_maria_wsl
      - pg_db_wsl

  ############## PHP 8.1 ##############
  webapp-8-1:
    build:
      args:
        uname: ${PHP_UNAME}
        uid: ${PHP_UID}
        gid: ${PHP_GID}
      context: ./fpm/fpm-8.1
      dockerfile: Dockerfile
    image: webapp/php8.1 # имя будущего образа
    container_name: webapp81_wsl # имя контейнера после запуска
    restart: unless-stopped
    extra_hosts:
      - "host.docker.internal:host-gateway"
    # ports:
    #   - "9003:9003"
    volumes:
      - ./code:${SITE_PATH}
      - ./.env:${SITE_PATH}/.env
      - ./fpm/fpm-8.1/custom_php.ini:/usr/local/etc/php/conf.d/custom_php.ini
      # - ./fpm/fpm-8.1/php.ini:/usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini
    environment:
      COMPOSER_MEMORY_LIMIT: 2G
      XDEBUG_CONFIG: client_host=${XDEBUG_REMOTE_HOST} client_port=${XDEBUG_STORM_PORT} remote_enable=1
      PHP_IDE_CONFIG: serverName=${XDEBUG_STORM_SERVER_NAME}
    expose:
      - 9000
      - 9003
    networks:
      - app-net
    depends_on:
      - db_maria_wsl
      - pg_db_wsl
  ############## PHP 8.3 ##############
  webapp-8-3:
    build:
      args:
        uname: ${PHP_UNAME}
        uid: ${PHP_UID}
        gid: ${PHP_GID}
      context: ./fpm/fpm-8.3
      dockerfile: Dockerfile
    image: webapp/php8.3 # имя будущего образа
    container_name: webapp83_wsl # имя контейнера после запуска
    restart: unless-stopped
    extra_hosts:
      - "host.docker.internal:host-gateway"
    # ports:
    #   - "9003:9003"
    volumes:
      - ./code:${SITE_PATH}:cached
      - ./.env:${SITE_PATH}/.env:cached
      - ./fpm/fpm-8.3/custom_php.ini:/usr/local/etc/php/conf.d/custom_php.ini:cached
      # - ./fpm/fpm-8.3/php.ini:/usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini
    environment:
      COMPOSER_MEMORY_LIMIT: 2G
      # XDEBUG_CONFIG: client_host=${XDEBUG_REMOTE_HOST} client_port=${XDEBUG_STORM_PORT} remote_enable=1
      # PHP_IDE_CONFIG: serverName=${XDEBUG_STORM_SERVER_NAME}
    expose:
      - 9000
      - 9003
    # мы можем создать для контейнеров внутреннюю сеть
    networks:
      - app-net
    depends_on:
      - db_maria_wsl
      - pg_db_wsl
  ############## PHP 8.4 ##############
  # webapp-8-4:
  #   build:
  #     args:
  #       uname: ${PHP_UNAME}
  #       uid: ${PHP_UID}
  #       gid: ${PHP_GID}
  #     context: ./fpm/fpm-8.4
  #     dockerfile: Dockerfile
  #   image: webapp/php8.4 # имя будущего образа
  #   container_name: webapp84 # имя контейнера после запуска
  #   restart: unless-stopped
  #   extra_hosts:
  #   - "host.docker.internal:host-gateway"
  #   # ports:
  #   #   - "9003:9003"
  #   volumes:
  #     - ./code:${SITE_PATH}
  #     - ./.env:${SITE_PATH}/.env
  #     - ./fpm/fpm-8.4/custom_php.ini:/usr/local/etc/php/conf.d/custom_php.ini
  #   environment:
  #     COMPOSER_MEMORY_LIMIT: 2G
  #   expose:
  #     - 9000
  #     - 9003
  #   # мы можем создать для контейнеров внутреннюю сеть
  #   networks:
  #     - app-net
  #   depends_on:
  #     - db_maria_wsl
  #     - pg_db_wsl
  ########################################## END PHP ##########################################
  #контейне с Nginx
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    image: webapp/nginx
    container_name: nginx_wsl
    # проброс портов
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./code:/data:cached
      - ./nginx/hosts:/etc/nginx/sites-enabled:cached
    networks:
      - app-net
    depends_on:
      - webapp-7-4
      - webapp-8-1
      - webapp-8-3
      - db_maria_wsl
      - pg_db_wsl

  # контейнер с MySQL
  # строим на базе стандартного образа
  db_maria_wsl:
    image: mariadb
    container_name: maria_db_wsl
    restart: always
    ports:
      - "3306:3306"
    # описываем, какую БД мы создаём
    environment:
      # MARIADB_USER: mdb_user #${MARIADB_USER}
      # MARIADB_PASSWORD: ${MARIADB_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MARIADB_ROOT_PASSWORD}
      MARIADB_ROOT_PASSWORD: ${MARIADB_ROOT_PASSWORD}
      #      MARIADB_RANDOM_ROOT_PASSWORD: 'yes'
      # MYSQL_DATABASE: ${MARIADB_DATABASE}
      #      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      #      MYSQL_USER: ${MYSQL_USER}
      #      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      # MYSQL_ROOT_PASSWORD: rootpassword
      # MYSQL_DATABASE: sky_db
      # MYSQL_USER: muser
      # MYSQL_PASSWORD: pass
    volumes:
      - ./dbdata/mysqldata:/var/lib/mysql:cached
    networks:
      - app-net

  # контейнер с PostgresQL
  pg_db_wsl:
    image: postgres:14.4-alpine
    container_name: pg_db_wsl
    restart: always
    ports:
      - "5432:5432"
    # описываем, какую БД мы создаём
    environment:
      POSTGRES_USER: ${PGSQL_DB_USERNAME}
      POSTGRES_PASSWORD: ${PGSQL_DB_PASSWORD}
      POSTGRES_DB: ${PGSQL_DATABASE}
      PGDATA: /dbdata/postgres
    volumes:
      - ./dbdata/pgdata:/data/postgres
    networks:
      - app-net
  # контейнер с Node.js
  # nodejs:
  #   build:
  #     context: ./nodejs
  #     dockerfile: Dockerfile
  #   image: nodejs
  #   container_name: node_js
  #   ports:
  #     - 8081:8081
  #   restart: unless-stopped
  #   volumes:
  #     # - ./code:/data
  #     - ./code/nodejs/app:/data/nodejs/app
  #   networks:
  #     - app-net
  # контейнер с Redis
  redis:
    # image: redis:latest
    build:
      context: ./redis
      dockerfile: Dockerfile
    image: redis_image
    container_name: redis_container_wsl
    restart: unless-stopped
    tty: true
    stdin_open: true
    ports:
      - "6378:6379"
    # описываем, какую БД мы создаём
    # environment:
    #   - REDIS_PASSWORD=${REDIS_PASSWORD}
    #   - REDIS_USER=${REDIS_USER}
    #   - REDIS_USER_PASSWORD=${REDIS_USER_PASSWORD}
    #   - REDIS_PORT=6379
    #   - REDIS_DB=0
    volumes:
      - ./redis/cache:/data/redis_cache
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - app-net
    depends_on:
      - db_maria_wsl
      - pg_db_wsl
  # for strapi
  # strapiexample:
  #   image: strapi/strapi
  #   container_name: strapiexample
  #   restart: unless-stopped
  #   env_file: .env
  #   environment:
  #     DATABASE_CLIENT: ${DATABASE_CLIENT}
  #     DATABASE_NAME: ${DATABASE_NAME}
  #     DATABASE_HOST: ${DATABASE_HOST}
  #     DATABASE_PORT: ${DATABASE_PORT}
  #     DATABASE_USERNAME: ${DATABASE_USERNAME}
  #     DATABASE_PASSWORD: ${DATABASE_PASSWORD}
  #   #    links:
  #   #      - mongo:mongo
  #   networks:
  #     - strapi-app-network
  #   volumes:
  #     - ./code/nuxt.loc:/data/nuxt.loc
  #   ports:
  #     - "1337:1337"
  # MONGO for Strapi
  # mongo_db:
  #   image: mongo
  #   container_name: mongo_strapi
  #   restart: unless-stopped
  #   env_file: .env
  #   environment:
  #     MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
  #     MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
  #   networks:
  #     - app-net
  #   volumes:
  #     - ./dbdata/strapidata:/data/db
  #   ports:
  #     - "27017:27017"
#Docker Networks
networks:
  app-net:
    driver: bridge
    # ipam:
    #   driver: default
    #   config:
    #     - subnet: ${SUBNET_IP}/${SUBNET_MASK}
  # strapi-app-network:
  #   driver: bridge
